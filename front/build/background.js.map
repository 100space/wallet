{"version":3,"file":"background.js","mappings":"mBAEA,IAAIA,EAAgBC,aAAY,KAC5BC,QAAQC,IAAI,+BACZC,cAAcJ,GACVK,SACAC,OAAOC,QAAQC,YAAYC,aAAaC,IACb,YAAnBA,EAAQC,OAERT,QAAQC,IAAI,2FACc,WAAnBO,EAAQC,QACfT,QAAQC,IAAI,sGAEhB,IAGJG,OAAOC,QAAQK,UAAUH,aAAY,CAACI,EAASC,EAAQC,KACnDb,QAAQC,IAAI,wEAAuBU,GACnC,MAAM,KAAEG,EAAI,OAAEC,EAAM,OAAEC,GAAWL,EAwCjC,MAtCa,QAATG,GAA8B,wBAAXC,GAA+C,2BAAXA,IACvDf,QAAQC,IAAI,uCAAea,EAAMC,EAAQC,GACzCZ,OAAOa,QAAQC,OACX,CACIC,IAAKf,OAAOC,QAAQe,OAAO,gBAC3BN,KAAM,QACNO,MAAO,IACPC,OAAQ,MAEXnB,IACG,MAAMoB,EAAepB,EAAOqB,KAAK,GAAGC,GAC9BC,EAAiBA,CAACC,EAAOC,EAAYC,KAEnCF,IAAUJ,GAAsC,aAAtBK,EAAWE,SACrC1B,OAAOoB,KAAKO,YAAYJ,EAAO,CAAEb,KAAMC,EAAQC,WAG/CZ,OAAOoB,KAAKQ,UAAUC,eAAeP,GACzC,EAIJtB,OAAOoB,KAAKQ,UAAUzB,YAAYmB,EAAe,KAI7DvB,OAAO+B,YAAY,CAAEpB,OAAMC,SAAQC,UAAU,KAE7Cb,OAAOgC,iBAAiB,WAAYC,IAChC,GAAIA,EAAMC,SAAWlC,OAAQ,OAC7B,MAAM,KAAEW,EAAI,GAAEW,EAAE,SAAEa,GAAaF,EAAMG,KACrCvC,QAAQC,IAAI,4DAA+Ba,EAAMW,EAAIa,GACxC,QAATxB,GAAkBwB,IAClBtC,QAAQC,IAAImC,EAAMG,MAClBvC,QAAQC,IAAI,4CAAoBa,EAAMW,EAAIa,GAC1CzB,EAAa,CAAEC,KAAM,MAAOW,KAAIa,aACpC,KAEG,CAAI,IAEnB,GACD,I","sources":["../public/background.js"],"sourcesContent":["/* eslint-disable no-undef */\nimport { ethers } from \"ethers\"\nlet checkInterval = setInterval(() => {\n    console.log(\"window object is available!\")\n    clearInterval(checkInterval)\n    if (window) {\n        chrome.runtime.onInstalled.addListener((details) => {\n            if (details.reason === \"install\") {\n                // 첫 설치시 실행할 코드\n                console.log(\"확장 프로그램이 설치되었습니다.\")\n            } else if (details.reason === \"update\") {\n                console.log(\"확장 프로그램이 새로고칭되었습니다.\")\n                // 버전 업데이트 또는 확장 프로그램에서 새로고침시\n            }\n        })\n        // 익스텐션 메시지 수신\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            console.log(\"event에서 보내는 메시지 수신:\", message)\n            const { type, method, params } = message\n\n            if (type === \"req\" && (method === \"eth_sendTransaction\" || method === \"eth_sendRawTransaction\")) {\n                console.log(\"팝업 뛰울 때 !!:\", type, method, params)\n                chrome.windows.create(\n                    {\n                        url: chrome.runtime.getURL(\"approve.html\"),\n                        type: \"popup\",\n                        width: 400,\n                        height: 750,\n                    },\n                    (window) => {\n                        const createdTabId = window.tabs[0].id\n                        const updateListener = (tabId, changeInfo, tab) => {\n                            // 우리가 생성한 탭이 완전히 로드된 상태인 경우에만 메시지를 보냅니다.\n                            if (tabId === createdTabId && changeInfo.status === \"complete\") {\n                                chrome.tabs.sendMessage(tabId, { type: method, params })\n\n                                // 메시지를 보낸 후에는 리스너를 제거합니다.\n                                chrome.tabs.onUpdated.removeListener(updateListener)\n                            }\n                        }\n\n                        // 탭의 상태가 업데이트 될 때마다 updateListener 함수를 호출하도록 리스너를 등록합니다.\n                        chrome.tabs.onUpdated.addListener(updateListener)\n                    }\n                )\n            }\n            window.postMessage({ type, method, params }, \"*\")\n\n            window.addEventListener(\"message\", (event) => {\n                if (event.source !== window) return\n                const { type, id, response } = event.data\n                console.log(\"external에서 background로 반환값:\", type, id, response)\n                if (type === \"res\" && response) {\n                    console.log(event.data)\n                    console.log(\"external에서 온 답장:\", type, id, response)\n                    sendResponse({ type: \"res\", id, response })\n                }\n            })\n            return true\n        })\n    }\n}, 1000)\n"],"names":["checkInterval","setInterval","console","log","clearInterval","window","chrome","runtime","onInstalled","addListener","details","reason","onMessage","message","sender","sendResponse","type","method","params","windows","create","url","getURL","width","height","createdTabId","tabs","id","updateListener","tabId","changeInfo","tab","status","sendMessage","onUpdated","removeListener","postMessage","addEventListener","event","source","response","data"],"sourceRoot":""}